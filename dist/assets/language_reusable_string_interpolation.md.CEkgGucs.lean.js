import{_ as n,c as s,a3 as e,o as t}from"./chunks/framework.ohJJpums.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"language/reusable/string_interpolation.md","filePath":"language/reusable/string_interpolation.md"}'),o={name:"language/reusable/string_interpolation.md"};function l(p,a,i,r,c,d){return t(),s("div",null,a[0]||(a[0]=[e(`<h3 id="string-interplation" tabindex="-1">String Interplation <br> <a class="header-anchor" href="#string-interplation" aria-label="Permalink to &quot;String Interplation &lt;br&gt;&quot;">â€‹</a></h3><p><code>String Interplation</code> can be achieved in <code>Danfe</code> by using <code>%i{</code> before a variable name and <code>}</code> after. The variable will be converted to a string and embedded into the literal:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-ibXQZ" id="tab-jQQINHJ" checked><label data-title="English" for="tab-jQQINHJ">English</label><input type="radio" name="group-ibXQZ" id="tab-wugiigw"><label data-title="Neplai" for="tab-wugiigw">Neplai</label></div><div class="blocks"><div class="language-danfe vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">name</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;Danfe&quot;</span></span>
<span class="line"><span style="color:#FF9492;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Hello from </span><span style="color:#FF9492;">%i{</span><span style="color:#ADDCFF;">name</span><span style="color:#FF9492;">}</span><span style="color:#ADDCFF;">!&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">name</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;Danfe&quot;</span></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Hello from </span><span style="color:#FF9492;">%i{</span><span style="color:#ADDCFF;">name</span><span style="color:#FF9492;">}</span><span style="color:#ADDCFF;">!&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span></code></pre></div></div></div><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#91CBFF;font-weight:bold;"># Output</span></span>
<span class="line"><span style="color:#F0F3F6;">Hello from Danfe!</span></span>
<span class="line"></span></code></pre></div>`,4)]))}const u=n(o,[["render",l]]);export{g as __pageData,u as default};
