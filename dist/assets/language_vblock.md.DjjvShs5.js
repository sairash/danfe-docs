import{_ as a,c as n,a3 as l,o as e}from"./chunks/framework.ohJJpums.js";const y=JSON.parse('{"title":"V Block","description":"","frontmatter":{},"headers":[],"relativePath":"language/vblock.md","filePath":"language/vblock.md"}'),o={name:"language/vblock.md"};function p(t,s,c,r,F,i){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="v-block" tabindex="-1">V Block <a class="header-anchor" href="#v-block" aria-label="Permalink to &quot;V Block&quot;">â€‹</a></h1><p>You can run <a href="https://vlang.io/" target="_blank" rel="noreferrer">V</a> code from Danfe. It is not the fastest as it is evaluating using the <code>v binary</code> nevertheless still you can run v code directly from <code>danfe</code> program. <br></p><p>To acheave that you need to write your v code in between <code>v {</code> and <code>} endv</code> in danfe. <br><br> The value evaluated from v is returned using this special function <code>return()</code></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>As the v code is evaluated in a different process using <code>os terminal</code>. If you try to <code>stdout</code> in the terminal (<code>print</code>, <code>println</code>) then that is picked up and returned to the danfe identifier.</p></div><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-j8Plz" id="tab-Qh0zklT" checked><label data-title="Engllish" for="tab-Qh0zklT">Engllish</label><input type="radio" name="group-j8Plz" id="tab-lbgPJpL"><label data-title="Nepali" for="tab-lbgPJpL">Nepali</label></div><div class="blocks"><div class="language-danfe vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#F0F3F6;">time </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> v</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    //</span><span style="color:#F0F3F6;"> V code goes here</span></span>
<span class="line"><span style="color:#FF9492;">    import</span><span style="color:#F0F3F6;"> time</span></span>
<span class="line"><span style="color:#FF9492;">    return(</span><span style="color:#F0F3F6;">time.now</span><span style="color:#FF9492;">())</span><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">endv</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> get_current_time_nano</span><span style="color:#FF9492;">()</span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#FF9492;"> v</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">        import</span><span style="color:#F0F3F6;"> time</span></span>
<span class="line"><span style="color:#FF9492;">        return(</span><span style="color:#F0F3F6;">time.now</span><span style="color:#FF9492;">()</span><span style="color:#91CBFF;">.unix_nano</span><span style="color:#FF9492;">())</span><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">endv</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">time_in_int </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> get_current_time_nano</span><span style="color:#FF9492;">()</span></span>
<span class="line"></span></code></pre></div><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#F0F3F6;">samaya </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> v</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    //</span><span style="color:#F0F3F6;"> V code goes here</span></span>
<span class="line"><span style="color:#FF9492;">    import</span><span style="color:#F0F3F6;"> time</span></span>
<span class="line"><span style="color:#FF9492;">    return(</span><span style="color:#F0F3F6;">time.now</span><span style="color:#FF9492;">())</span><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">endv</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> get_current_time_nano</span><span style="color:#FF9492;">()</span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">    pathau</span><span style="color:#FF9492;"> v</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">        import</span><span style="color:#F0F3F6;"> time</span></span>
<span class="line"><span style="color:#FF9492;">        return(</span><span style="color:#F0F3F6;">time.now</span><span style="color:#FF9492;">()</span><span style="color:#91CBFF;">.unix_nano</span><span style="color:#FF9492;">())</span><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">endv</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">samaya_in_int </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> get_current_time_nano</span><span style="color:#FF9492;">()</span></span>
<span class="line"></span></code></pre></div></div></div><p>Now let&#39;s print the <code>identifiers</code> and check it&#39;s type</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-rrnet" id="tab-S2cjJpb" checked><label data-title="Engllish" for="tab-S2cjJpb">Engllish</label><input type="radio" name="group-rrnet" id="tab-5eS39IA"><label data-title="Nepali" for="tab-5eS39IA">Nepali</label></div><div class="blocks"><div class="language-danfe vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FF9492;">println(</span><span style="color:#ADDCFF;">&quot;%i{time} &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#DBB7FF;">typeof</span><span style="color:#FF9492;">(</span><span style="color:#F0F3F6;">time</span><span style="color:#FF9492;">))</span></span>
<span class="line"><span style="color:#FF9492;">println(</span><span style="color:#ADDCFF;">&quot;%i{time_in_int} &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#DBB7FF;">typeof</span><span style="color:#FF9492;">(</span><span style="color:#F0F3F6;">time_in_int</span><span style="color:#FF9492;">))</span></span></code></pre></div><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#FF9492;">(</span><span style="color:#ADDCFF;">&quot;%i{time} &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#DBB7FF;">prakar</span><span style="color:#FF9492;">(</span><span style="color:#F0F3F6;">samaya</span><span style="color:#FF9492;">))</span></span>
<span class="line"><span style="color:#DBB7FF;">dekhauln</span><span style="color:#FF9492;">(</span><span style="color:#ADDCFF;">&quot;%i{time_in_int} &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#DBB7FF;">prakar</span><span style="color:#FF9492;">(</span><span style="color:#F0F3F6;">samaya_in_int</span><span style="color:#FF9492;">))</span></span></code></pre></div></div></div><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#91CBFF;font-weight:bold;"># Output</span></span>
<span class="line"><span style="color:#F0F3F6;">2024-11-05 08:29:45 string</span></span>
<span class="line"><span style="color:#F0F3F6;">1730795410413653603 int</span></span></code></pre></div>`,8)]))}const u=a(o,[["render",p]]);export{y as __pageData,u as default};
