import{_ as t,c as a,a3 as r,o as d}from"./chunks/framework.ohJJpums.js";const i=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"language/reusable/type-table.md","filePath":"language/reusable/type-table.md"}'),n={name:"language/reusable/type-table.md"};function s(o,e,l,c,p,u){return d(),a("div",null,e[0]||(e[0]=[r('<table tabindex="0"><thead><tr><th>Type</th><th>Info</th></tr></thead><tbody><tr><td><a href="/language/danfe-types#string">string</a></td><td>Represents array of <code>characters</code>.</td></tr><tr><td><a href="/language/danfe-types#numbers">int</a></td><td>Represents <code>real numbers</code>.</td></tr><tr><td><a href="/language/danfe-types#numbers">float</a></td><td>Represents double precision <code>floating point</code> numbers.</td></tr><tr><td><a href="/language/danfe-types#int">nil</a></td><td>Represented with <code>0</code> in memory</td></tr><tr><td><a href="/language/danfe-types#int">boolean</a></td><td><code>true</code> or <code>false</code> value</td></tr><tr><td><a href="/language/danfe-types#array">array</a></td><td>Linear data structure where all elements are <code>arranged sequentially</code>.</td></tr><tr><td><a href="/language/danfe-types#table">table</a></td><td>A data structure that stores any <code>danfe types</code> in key value pairs</td></tr></tbody></table>',1)]))}const g=t(n,[["render",s]]);export{i as __pageData,g as default};
